// Generated by gencpp from file beginner_tutorials/Mag.msg
// DO NOT EDIT!


#ifndef BEGINNER_TUTORIALS_MESSAGE_MAG_H
#define BEGINNER_TUTORIALS_MESSAGE_MAG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace beginner_tutorials
{
template <class ContainerAllocator>
struct Mag_
{
  typedef Mag_<ContainerAllocator> Type;

  Mag_()
    : name()
    , deviceID(0)
    , mag_x(0.0)
    , mag_y(0.0)
    , mag_z(0.0)  {
    }
  Mag_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , deviceID(0)
    , mag_x(0.0)
    , mag_y(0.0)
    , mag_z(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef int32_t _deviceID_type;
  _deviceID_type deviceID;

   typedef float _mag_x_type;
  _mag_x_type mag_x;

   typedef float _mag_y_type;
  _mag_y_type mag_y;

   typedef float _mag_z_type;
  _mag_z_type mag_z;





  typedef boost::shared_ptr< ::beginner_tutorials::Mag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner_tutorials::Mag_<ContainerAllocator> const> ConstPtr;

}; // struct Mag_

typedef ::beginner_tutorials::Mag_<std::allocator<void> > Mag;

typedef boost::shared_ptr< ::beginner_tutorials::Mag > MagPtr;
typedef boost::shared_ptr< ::beginner_tutorials::Mag const> MagConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beginner_tutorials::Mag_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beginner_tutorials::Mag_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::beginner_tutorials::Mag_<ContainerAllocator1> & lhs, const ::beginner_tutorials::Mag_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.deviceID == rhs.deviceID &&
    lhs.mag_x == rhs.mag_x &&
    lhs.mag_y == rhs.mag_y &&
    lhs.mag_z == rhs.mag_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::beginner_tutorials::Mag_<ContainerAllocator1> & lhs, const ::beginner_tutorials::Mag_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace beginner_tutorials

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::Mag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::Mag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::Mag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::Mag_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::Mag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::Mag_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beginner_tutorials::Mag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ba5a5347ac523925835e1f68e04750c5";
  }

  static const char* value(const ::beginner_tutorials::Mag_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xba5a5347ac523925ULL;
  static const uint64_t static_value2 = 0x835e1f68e04750c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner_tutorials::Mag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beginner_tutorials/Mag";
  }

  static const char* value(const ::beginner_tutorials::Mag_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beginner_tutorials::Mag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"int32 deviceID\n"
"float32 mag_x\n"
"float32 mag_y\n"
"float32 mag_z\n"
;
  }

  static const char* value(const ::beginner_tutorials::Mag_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beginner_tutorials::Mag_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.deviceID);
      stream.next(m.mag_x);
      stream.next(m.mag_y);
      stream.next(m.mag_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Mag_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beginner_tutorials::Mag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beginner_tutorials::Mag_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "deviceID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.deviceID);
    s << indent << "mag_x: ";
    Printer<float>::stream(s, indent + "  ", v.mag_x);
    s << indent << "mag_y: ";
    Printer<float>::stream(s, indent + "  ", v.mag_y);
    s << indent << "mag_z: ";
    Printer<float>::stream(s, indent + "  ", v.mag_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEGINNER_TUTORIALS_MESSAGE_MAG_H
