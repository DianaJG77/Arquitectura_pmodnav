// Generated by gencpp from file beginner_tutorials/PmodNav.msg
// DO NOT EDIT!


#ifndef BEGINNER_TUTORIALS_MESSAGE_PMODNAV_H
#define BEGINNER_TUTORIALS_MESSAGE_PMODNAV_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace beginner_tutorials
{
template <class ContainerAllocator>
struct PmodNav_
{
  typedef PmodNav_<ContainerAllocator> Type;

  PmodNav_()
    : name_accel_gyro()
    , deviceID_accel_gyro(0)
    , accel_x(0.0)
    , accel_y(0.0)
    , accel_z(0.0)
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , name_mag()
    , deviceID_mag(0)
    , mag_x(0.0)
    , mag_y(0.0)
    , mag_z(0.0)
    , name_alt_temp()
    , deviceID_alt_temp(0)
    , alt(0.0)
    , temp(0.0)  {
    }
  PmodNav_(const ContainerAllocator& _alloc)
    : name_accel_gyro(_alloc)
    , deviceID_accel_gyro(0)
    , accel_x(0.0)
    , accel_y(0.0)
    , accel_z(0.0)
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , name_mag(_alloc)
    , deviceID_mag(0)
    , mag_x(0.0)
    , mag_y(0.0)
    , mag_z(0.0)
    , name_alt_temp(_alloc)
    , deviceID_alt_temp(0)
    , alt(0.0)
    , temp(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_accel_gyro_type;
  _name_accel_gyro_type name_accel_gyro;

   typedef int32_t _deviceID_accel_gyro_type;
  _deviceID_accel_gyro_type deviceID_accel_gyro;

   typedef float _accel_x_type;
  _accel_x_type accel_x;

   typedef float _accel_y_type;
  _accel_y_type accel_y;

   typedef float _accel_z_type;
  _accel_z_type accel_z;

   typedef float _gyro_x_type;
  _gyro_x_type gyro_x;

   typedef float _gyro_y_type;
  _gyro_y_type gyro_y;

   typedef float _gyro_z_type;
  _gyro_z_type gyro_z;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_mag_type;
  _name_mag_type name_mag;

   typedef int32_t _deviceID_mag_type;
  _deviceID_mag_type deviceID_mag;

   typedef float _mag_x_type;
  _mag_x_type mag_x;

   typedef float _mag_y_type;
  _mag_y_type mag_y;

   typedef float _mag_z_type;
  _mag_z_type mag_z;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_alt_temp_type;
  _name_alt_temp_type name_alt_temp;

   typedef int32_t _deviceID_alt_temp_type;
  _deviceID_alt_temp_type deviceID_alt_temp;

   typedef float _alt_type;
  _alt_type alt;

   typedef float _temp_type;
  _temp_type temp;





  typedef boost::shared_ptr< ::beginner_tutorials::PmodNav_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner_tutorials::PmodNav_<ContainerAllocator> const> ConstPtr;

}; // struct PmodNav_

typedef ::beginner_tutorials::PmodNav_<std::allocator<void> > PmodNav;

typedef boost::shared_ptr< ::beginner_tutorials::PmodNav > PmodNavPtr;
typedef boost::shared_ptr< ::beginner_tutorials::PmodNav const> PmodNavConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beginner_tutorials::PmodNav_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beginner_tutorials::PmodNav_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::beginner_tutorials::PmodNav_<ContainerAllocator1> & lhs, const ::beginner_tutorials::PmodNav_<ContainerAllocator2> & rhs)
{
  return lhs.name_accel_gyro == rhs.name_accel_gyro &&
    lhs.deviceID_accel_gyro == rhs.deviceID_accel_gyro &&
    lhs.accel_x == rhs.accel_x &&
    lhs.accel_y == rhs.accel_y &&
    lhs.accel_z == rhs.accel_z &&
    lhs.gyro_x == rhs.gyro_x &&
    lhs.gyro_y == rhs.gyro_y &&
    lhs.gyro_z == rhs.gyro_z &&
    lhs.name_mag == rhs.name_mag &&
    lhs.deviceID_mag == rhs.deviceID_mag &&
    lhs.mag_x == rhs.mag_x &&
    lhs.mag_y == rhs.mag_y &&
    lhs.mag_z == rhs.mag_z &&
    lhs.name_alt_temp == rhs.name_alt_temp &&
    lhs.deviceID_alt_temp == rhs.deviceID_alt_temp &&
    lhs.alt == rhs.alt &&
    lhs.temp == rhs.temp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::beginner_tutorials::PmodNav_<ContainerAllocator1> & lhs, const ::beginner_tutorials::PmodNav_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace beginner_tutorials

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::PmodNav_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::PmodNav_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::PmodNav_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::PmodNav_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::PmodNav_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::PmodNav_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beginner_tutorials::PmodNav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b0aaed9046365d75b6b5593dfab947b";
  }

  static const char* value(const ::beginner_tutorials::PmodNav_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b0aaed9046365d7ULL;
  static const uint64_t static_value2 = 0x5b6b5593dfab947bULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner_tutorials::PmodNav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beginner_tutorials/PmodNav";
  }

  static const char* value(const ::beginner_tutorials::PmodNav_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beginner_tutorials::PmodNav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name_accel_gyro\n"
"int32 deviceID_accel_gyro\n"
"float32 accel_x\n"
"float32 accel_y\n"
"float32 accel_z\n"
"float32 gyro_x\n"
"float32 gyro_y\n"
"float32 gyro_z\n"
"string name_mag\n"
"int32 deviceID_mag\n"
"float32 mag_x\n"
"float32 mag_y\n"
"float32 mag_z\n"
"string name_alt_temp\n"
"int32 deviceID_alt_temp\n"
"float32 alt\n"
"float32 temp\n"
"\n"
"\n"
;
  }

  static const char* value(const ::beginner_tutorials::PmodNav_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beginner_tutorials::PmodNav_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name_accel_gyro);
      stream.next(m.deviceID_accel_gyro);
      stream.next(m.accel_x);
      stream.next(m.accel_y);
      stream.next(m.accel_z);
      stream.next(m.gyro_x);
      stream.next(m.gyro_y);
      stream.next(m.gyro_z);
      stream.next(m.name_mag);
      stream.next(m.deviceID_mag);
      stream.next(m.mag_x);
      stream.next(m.mag_y);
      stream.next(m.mag_z);
      stream.next(m.name_alt_temp);
      stream.next(m.deviceID_alt_temp);
      stream.next(m.alt);
      stream.next(m.temp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PmodNav_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beginner_tutorials::PmodNav_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beginner_tutorials::PmodNav_<ContainerAllocator>& v)
  {
    s << indent << "name_accel_gyro: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name_accel_gyro);
    s << indent << "deviceID_accel_gyro: ";
    Printer<int32_t>::stream(s, indent + "  ", v.deviceID_accel_gyro);
    s << indent << "accel_x: ";
    Printer<float>::stream(s, indent + "  ", v.accel_x);
    s << indent << "accel_y: ";
    Printer<float>::stream(s, indent + "  ", v.accel_y);
    s << indent << "accel_z: ";
    Printer<float>::stream(s, indent + "  ", v.accel_z);
    s << indent << "gyro_x: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_x);
    s << indent << "gyro_y: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_y);
    s << indent << "gyro_z: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_z);
    s << indent << "name_mag: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name_mag);
    s << indent << "deviceID_mag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.deviceID_mag);
    s << indent << "mag_x: ";
    Printer<float>::stream(s, indent + "  ", v.mag_x);
    s << indent << "mag_y: ";
    Printer<float>::stream(s, indent + "  ", v.mag_y);
    s << indent << "mag_z: ";
    Printer<float>::stream(s, indent + "  ", v.mag_z);
    s << indent << "name_alt_temp: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name_alt_temp);
    s << indent << "deviceID_alt_temp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.deviceID_alt_temp);
    s << indent << "alt: ";
    Printer<float>::stream(s, indent + "  ", v.alt);
    s << indent << "temp: ";
    Printer<float>::stream(s, indent + "  ", v.temp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEGINNER_TUTORIALS_MESSAGE_PMODNAV_H
